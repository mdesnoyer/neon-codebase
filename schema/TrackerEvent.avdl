//
// Schema that defines a TrackerEvent.
//
// It is wrapped in a protocol so that we can do the definition using
// the idl format, which takes comments and is easier to read than the
// json. To generate the json schema needed by avro use:
//
// compile_schema.py
//
// Author: Mark Desnoyer (desnoyer@neon-lab.com)
// Copyright 2014 Neon Labs Inc.
//
@namespace("com.neon.Tracker")
protocol DummyTrackerProtocol {

import idl "CommonTrackerInfo.avdl";

enum TrackerType {
  BRIGHTCOVE, OOYALA, BCGALLERY, IGN
}

enum EventType {
  IMAGE_VISIBLE, IMAGES_VISIBLE, IMAGE_LOAD, IMAGES_LOADED, IMAGE_CLICK,
  VIDEO_CLICK, VIDEO_PLAY, AD_PLAY, VIDEO_VIEW_PERCENTAGE
}


record ImagesVisible {
  boolean isImagesVisible = true;
  array<string> thumbnailIds;
}

record ImageVisible {
  string thumbnailId;
}

record ImageLoad {
  string thumbnailId;
  int height;  // Displayed height of the image
  int width;   // Displayed width of the image
}

record ImagesLoaded {
  boolean isImagesLoaded = true;
  array<ImageLoad> images;
}

record ImageClick {
  boolean isImageClick = true;

  string thumbnailId;
  Coords pageCoords; // Coordinates of the click relative to the page
  Coords windowCoords; // Coordinates of the click relative to the visible window
  // Coordinates of the click relative to the image
  union{null, Coords} imageCoords = null;
}


record VideoClick {
  boolean isVideoClick = true; // Used so that the event isn't confused in the union.

  string videoId;  // External video id
  string playerId;
  union{null, string} thumbnailId;
}


record VideoPlay {
  boolean isVideoPlay = true; // Used so that the event isn't confused in the union.

  string videoId; // External video id
  union{null, string} playerId;
  union{null, string} thumbnailId;
  boolean didAdPlay = false;  // Was an ad play detected before the video

  // Time when the player initiates a request to play the video - the
  // last time an image or the player was clicked by the user. Used to
  // identify autoplay. Given in milliseconds, or null if there was no
  // click
  union{null, int} autoplayDelta;

  // This video is the nth one playing on this page load. 1-based index
  int playCount; 
}


record AdPlay {
  boolean isAdPlay = true; // Used so that the event isn't confused in the union.

  // Video id. Can be null if the video click event doesn't fire in time
  // so we can't figure out which video is playing after the ad.
  union{null, string} videoId; // External video id
  union{null, string} playerId;
  union{null, string} thumbnailId;
  
  // Time when the player initiates a request to play the video - the
  // last time an image or the player was clicked by the user. Used to
  // identify autoplay. Given in milliseconds, or null if there was no
  // click
  union{null, int} autoplayDelta;

  // This ad is attached to the nth video playing on this page load. 
  // 1-based index
  int playCount; 
}

record VideoViewPercentage {
  boolean isVideoViewPercentage = true;

  string videoId; // External video id

  // This video is the nth one playing on this page load. 1-based index
  int playCount;

  // The percentage of the video that has been viewed. 0-100
  float percent;
}

// A generic tracker event
record TrackerEvent {
  string pageId; // Unique page load id

  string trackerAccountId;  // The publisher's tracker account id

  TrackerType trackerType;

  string pageURL;     // Page URL where the event took place

  union { null, string } refURL;  // The referral URL

  long serverTime;    // The server's time in ms since epoch

  long clientTime;    // The client's time in ms since epoch

  string clientIP;    // The client's ip address

  // The user id from the cookie. Can be an empty string
  string neonUserId = "";  

  union { null, string } userAgent;   // The user's agent string

  union { null, AgentInfo } agentInfo; // Translated agent info if available
  
  GeoData ipGeoData; // The user's location based on IP data
  
  EventType eventType;

  // Data specific to each event
  union {ImageVisible,
         ImagesVisible,
         ImageLoad,
         ImagesLoaded,
         ImageClick,
         VideoClick,
         VideoPlay,
         AdPlay,
         VideoViewPercentage} eventData;
}
}