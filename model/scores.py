def lookup(model, score):
    """Given a model, map score_fp to integer in [0..99]

    Gives the max integer for which table score is <= input score.
    E.g., Input:0.10, for model "aqv1.1" output: 9"""

    # TODO (Nick): Get the correct score with the demographic information
    score_float = float(score)
    if not model:
        sequence = previous_model
    else:
        sequence = aquila if model.find('aqv') > -1 else previous_model
    for i in xrange(len(sequence)):
        if sequence[i] > score_float:
            return max(0, i - 1)
    # Just return the maximum.
    return i

aquila = [
    -0.9562,
    -0.7858,
    -0.7314,
    -0.5571,
    -0.3776,
    -0.2331,
    -0.1220,
    -0.0266,
    0.0560,
    0.1287,
    0.1926,
    0.2497,
    0.3035,
    0.3553,
    0.4005,
    0.4419,
    0.4811,
    0.5180,
    0.5526,
    0.5848,
    0.6151,
    0.6443,
    0.6727,
    0.6995,
    0.7249,
    0.7496,
    0.7729,
    0.7964,
    0.8188,
    0.8395,
    0.8599,
    0.8804,
    0.8999,
    0.9187,
    0.9369,
    0.9551,
    0.9723,
    0.9889,
    1.0054,
    1.0213,
    1.0371,
    1.0523,
    1.0675,
    1.0821,
    1.0965,
    1.1107,
    1.1246,
    1.1385,
    1.1524,
    1.1662,
    1.1799,
    1.1931,
    1.2063,
    1.2192,
    1.2323,
    1.2453,
    1.2582,
    1.2712,
    1.2839,
    1.2967,
    1.3093,
    1.3221,
    1.3350,
    1.3478,
    1.3606,
    1.3732,
    1.3861,
    1.3989,
    1.4118,
    1.4247,
    1.4377,
    1.4507,
    1.4638,
    1.4770,
    1.4907,
    1.5042,
    1.5181,
    1.5323,
    1.5464,
    1.5609,
    1.5756,
    1.5909,
    1.6064,
    1.6222,
    1.6383,
    1.6553,
    1.6731,
    1.6915,
    1.7106,
    1.7313,
    1.7528,
    1.7761,
    1.8014,
    1.8298,
    1.8619,
    1.8996,
    1.9455,
    2.0039,
    2.0979]

previous_model = [
    0.000,
    0.155,
    0.194,
    0.222,
    0.247,
    0.269,
    0.289,
    0.310,
    0.328,
    0.347,
    0.363,
    0.381,
    0.396,
    0.410,
    0.424,
    0.438,
    0.452,
    0.465,
    0.479,
    0.492,
    0.504,
    0.517,
    0.531,
    0.543,
    0.555,
    0.567,
    0.579,
    0.590,
    0.602,
    0.613,
    0.624,
    0.635,
    0.647,
    0.658,
    0.670,
    0.681,
    0.693,
    0.704,
    0.715,
    0.727,
    0.739,
    0.751,
    0.763,
    0.776,
    0.790,
    0.801,
    0.813,
    0.826,
    0.837,
    0.850,
    0.863,
    0.876,
    0.889,
    0.901,
    0.915,
    0.928,
    0.943,
    0.957,
    0.972,
    0.986,
    1.002,
    1.017,
    1.032,
    1.047,
    1.064,
    1.080,
    1.096,
    1.115,
    1.132,
    1.151,
    1.170,
    1.191,
    1.212,
    1.233,
    1.255,
    1.277,
    1.301,
    1.324,
    1.350,
    1.376,
    1.402,
    1.432,
    1.461,
    1.494,
    1.529,
    1.566,
    1.604,
    1.646,
    1.690,
    1.741,
    1.792,
    1.847,
    1.917,
    1.991,
    2.080,
    2.187,
    2.315,
    2.474,
    2.703,
    3.131
]
