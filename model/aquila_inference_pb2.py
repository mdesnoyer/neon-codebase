# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: aquila_inference.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from protobuf import descriptor as _descriptor
from protobuf import message as _message
from protobuf import reflection as _reflection
from protobuf import symbol_database as _symbol_database
from protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='aquila_inference.proto',
  package='tensorflow.serving',
  syntax='proto3',
  serialized_pb=_b('\n\x16\x61quila_inference.proto\x12\x12tensorflow.serving\"\'\n\rAquilaRequest\x12\x16\n\nimage_data\x18\x01 \x03(\x02\x42\x02\x10\x01\"!\n\x0e\x41quilaResponse\x12\x0f\n\x07valence\x18\x01 \x03(\x02\x32\x61\n\rAquilaService\x12P\n\x07Regress\x12!.tensorflow.serving.AquilaRequest\x1a\".tensorflow.serving.AquilaResponseb\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_AQUILAREQUEST = _descriptor.Descriptor(
  name='AquilaRequest',
  full_name='tensorflow.serving.AquilaRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='image_data', full_name='tensorflow.serving.AquilaRequest.image_data', index=0,
      number=1, type=2, cpp_type=6, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\020\001'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=46,
  serialized_end=85,
)


_AQUILARESPONSE = _descriptor.Descriptor(
  name='AquilaResponse',
  full_name='tensorflow.serving.AquilaResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='valence', full_name='tensorflow.serving.AquilaResponse.valence', index=0,
      number=1, type=2, cpp_type=6, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=87,
  serialized_end=120,
)

DESCRIPTOR.message_types_by_name['AquilaRequest'] = _AQUILAREQUEST
DESCRIPTOR.message_types_by_name['AquilaResponse'] = _AQUILARESPONSE

AquilaRequest = _reflection.GeneratedProtocolMessageType('AquilaRequest', (_message.Message,), dict(
  DESCRIPTOR = _AQUILAREQUEST,
  __module__ = 'aquila_inference_pb2'
  # @@protoc_insertion_point(class_scope:tensorflow.serving.AquilaRequest)
  ))
_sym_db.RegisterMessage(AquilaRequest)

AquilaResponse = _reflection.GeneratedProtocolMessageType('AquilaResponse', (_message.Message,), dict(
  DESCRIPTOR = _AQUILARESPONSE,
  __module__ = 'aquila_inference_pb2'
  # @@protoc_insertion_point(class_scope:tensorflow.serving.AquilaResponse)
  ))
_sym_db.RegisterMessage(AquilaResponse)


_AQUILAREQUEST.fields_by_name['image_data'].has_options = True
_AQUILAREQUEST.fields_by_name['image_data']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\020\001'))
import abc
import six
from grpc.beta import implementations as beta_implementations
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities

class BetaAquilaServiceServicer(six.with_metaclass(abc.ABCMeta, object)):
  """<fill me in later!>"""
  @abc.abstractmethod
  def Regress(self, request, context):
    raise NotImplementedError()

class BetaAquilaServiceStub(six.with_metaclass(abc.ABCMeta, object)):
  """The interface to which stubs will conform."""
  @abc.abstractmethod
  def Regress(self, request, timeout):
    raise NotImplementedError()
  Regress.future = None

def beta_create_AquilaService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  import aquila_inference_pb2
  import aquila_inference_pb2
  request_deserializers = {
    ('tensorflow.serving.AquilaService', 'Regress'): aquila_inference_pb2.AquilaRequest.FromString,
  }
  response_serializers = {
    ('tensorflow.serving.AquilaService', 'Regress'): aquila_inference_pb2.AquilaResponse.SerializeToString,
  }
  method_implementations = {
    ('tensorflow.serving.AquilaService', 'Regress'): face_utilities.unary_unary_inline(servicer.Regress),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)

def beta_create_AquilaService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  import aquila_inference_pb2
  import aquila_inference_pb2
  request_serializers = {
    ('tensorflow.serving.AquilaService', 'Regress'): aquila_inference_pb2.AquilaRequest.SerializeToString,
  }
  response_deserializers = {
    ('tensorflow.serving.AquilaService', 'Regress'): aquila_inference_pb2.AquilaResponse.FromString,
  }
  cardinalities = {
    'Regress': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'tensorflow.serving.AquilaService', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
