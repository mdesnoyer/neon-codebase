.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test::Nginx 3"
.TH Test::Nginx 3 "2014-06-15" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Nginx \- Testing modules for Nginx C module development
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This distribution provides two testing modules for Nginx C module development:
.IP "\(bu" 4
Test::Nginx::Socket (This is recommended.)
.IP "\(bu" 4
Test::Nginx::LWP (This is obsolete.)
.PP
All of them are based on Test::Base.
.PP
Usually, Test::Nginx::Socket is preferred because it works on a much lower
level and not that fault tolerant like Test::Nginx::LWP.
.PP
Also, a lot of connection hang issues (like wrong \f(CW\*(C`r\->main\->count\*(C'\fR value in nginx
0.8.x) can only be captured by Test::Nginx::Socket because Perl's LWP::UserAgent client
will close the connection itself which will conceal such issues from
the testers.
.PP
Test::Nginx automatically starts an nginx instance (from the \f(CW\*(C`PATH\*(C'\fR env)
rooted at t/servroot/ and the default config template makes this nginx
instance listen on the port \f(CW1984\fR by default. One can specify a different
port number by setting his port number to the \f(CW\*(C`TEST_NGINX_PORT\*(C'\fR environment,
as in
.PP
.Vb 1
\&    export TEST_NGINX_PORT=1989
.Ve
.SS "etcproxy integration"
.IX Subsection "etcproxy integration"
The default settings in etcproxy (https://github.com/chaoslawful/etcproxy)
makes this small \s-1TCP\s0 proxy split the \s-1TCP\s0 packets into bytes and introduce 1 ms latency among them.
.PP
There's usually various \s-1TCP\s0 chains that we can put etcproxy into, for example
.PP
\fITest::Nginx <=> nginx\fR
.IX Subsection "Test::Nginx <=> nginx"
.PP
.Vb 1
\&  $ ./etcproxy 1234 1984
.Ve
.PP
Here we tell etcproxy to listen on port 1234 and to delegate all the
\&\s-1TCP\s0 traffic to the port 1984, the default port that Test::Nginx makes
nginx listen to.
.PP
And then we tell Test::Nginx to test against the port 1234, where
etcproxy listens on, rather than the port 1984 that nginx directly
listens on:
.PP
.Vb 1
\&  $ TEST_NGINX_CLIENT_PORT=1234 prove \-r t/
.Ve
.PP
Then the \s-1TCP\s0 chain now looks like this:
.PP
.Vb 1
\&  Test::Nginx <=> etcproxy (1234) <=> nginx (1984)
.Ve
.PP
So etcproxy can effectively emulate extreme network conditions and
exercise \*(L"unusual\*(R" code paths in your nginx server by your tests.
.PP
In practice, *tons* of weird bugs can be captured by this setting.
Even ourselves didn't expect that this simple approach is so
effective.
.PP
\fInginx <=> memcached\fR
.IX Subsection "nginx <=> memcached"
.PP
We first start the memcached server daemon on port 11211:
.PP
.Vb 1
\&   memcached \-p 11211 \-vv
.Ve
.PP
and then we another etcproxy instance to listen on port 11984 like this
.PP
.Vb 1
\&   $ ./etcproxy 11984 11211
.Ve
.PP
Then we tell our t/foo.t test script to connect to 11984 rather than 11211:
.PP
.Vb 6
\&  # foo.t
\&  use Test::Nginx::Socket;
\&  repeat_each(1);
\&  plan tests => 2 * repeat_each() * blocks();
\&  $ENV{TEST_NGINX_MEMCACHED_PORT} ||= 11211;  # make this env take a default value
\&  run_tests();
\&
\&  _\|_DATA_\|_
\&
\&  === TEST 1: sanity
\&  \-\-\- config
\&  location /foo {
\&       set $memc_cmd set;
\&       set $memc_key foo;
\&       set $memc_value bar;
\&       memc_pass 127.0.0.1:$TEST_NGINX_MEMCACHED_PORT;
\&  }
\&  \-\-\- request
\&      GET /foo
\&  \-\-\- response_body_like: STORED
\&  \-\-\- error_code: 201
.Ve
.PP
The Test::Nginx library will automatically expand the special macro
\&\f(CW$TEST_NGINX_MEMCACHED_PORT\fR to the environment with the same name.
You can define your own \f(CW$TEST_NGINX_BLAH_BLAH_PORT\fR macros as long as
its prefix is \f(CW\*(C`TEST_NGINX_\*(C'\fR and all in upper case letters.
.PP
And now we can run your test script against the etcproxy port 11984:
.PP
.Vb 1
\&   TEST_NGINX_MEMCACHED_PORT=11984 prove t/foo.t
.Ve
.PP
Then the \s-1TCP\s0 chains look like this:
.PP
.Vb 1
\&   Test::Nginx <=> nginx (1984) <=> etcproxy (11984) <=> memcached (11211)
.Ve
.PP
If \f(CW\*(C`TEST_NGINX_MEMCACHED_PORT\*(C'\fR is not set, then it will take the default
value 11211, which is what we want when there's no etcproxy
configured:
.PP
.Vb 1
\&   Test::Nginx <=> nginx (1984) <=> memcached (11211)
.Ve
.PP
This approach also works for proxied mysql and postgres traffic.
Please see the live test suite of ngx_drizzle and ngx_postgres for
more details.
.PP
Usually we set both \f(CW\*(C`TEST_NGINX_CLIENT_PORT\*(C'\fR and
\&\f(CW\*(C`TEST_NGINX_MEMCACHED_PORT\*(C'\fR (and etc) at the same time, effectively
yielding the following chain:
.PP
.Vb 1
\&   Test::Nginx <=> etcproxy (1234) <=> nginx (1984) <=> etcproxy (11984) <=> memcached (11211)
.Ve
.PP
as long as you run two separate etcproxy instances in two separate terminals.
.PP
It's easy to verify if the traffic actually goes through your etcproxy
server. Just check if the terminal running etcproxy emits outputs. By
default, etcproxy always dump out the incoming and outgoing data to
stdout/stderr.
.SS "valgrind integration"
.IX Subsection "valgrind integration"
Test::Nginx has integrated support for valgrind (<http://valgrind.org>) even though by
default it does not bother running it with the tests because valgrind
will significantly slow down the test sutie.
.PP
First ensure that your valgrind executable visible in your \s-1PATH\s0 env.
And then run your test suite with the \f(CW\*(C`TEST_NGINX_USE_VALGRIND\*(C'\fR env set
to true:
.PP
.Vb 1
\&   TEST_NGINX_USE_VALGRIND=1 prove \-r t
.Ve
.PP
If you see false alarms, you do have a chance to skip them by defining
a ./valgrind.suppress file at the root of your module source tree, as
in
.PP
https://github.com/chaoslawful/drizzle\-nginx\-module/blob/master/valgrind.suppress <https://github.com/chaoslawful/drizzle-nginx-module/blob/master/valgrind.suppress>
.PP
This is the suppression file for ngx_drizzle. Test::Nginx will
automatically use it to start nginx with valgrind memcheck if this
file does exist at the expected location.
.PP
If you do see a lot of \*(L"Connection refused\*(R" errors while running the
tests this way, then you probably have a slow machine (or a very busy
one) that the default waiting time is not sufficient for valgrind to
start. You can define the sleep time to a larger value by setting the
\&\f(CW\*(C`TEST_NGINX_SLEEP\*(C'\fR env:
.PP
.Vb 1
\&   TEST_NGINX_SLEEP=1 prove \-r t
.Ve
.PP
The time unit used here is \*(L"second\*(R". The default sleep setting just
fits my ThinkPad (\f(CW\*(C`Core2Duo T9600\*(C'\fR).
.PP
Applying the no-pool patch to your nginx core is recommended while
running nginx with valgrind:
.PP
https://github.com/shrimp/no\-pool\-nginx <https://github.com/shrimp/no-pool-nginx>
.PP
The nginx memory pool can prevent valgrind from spotting lots of
invalid memory reads/writes as well as certain double-free errors. We
did find a lot more memory issues in many of our modules when we first
introduced the no-pool patch in practice ;)
.PP
There's also more advanced features in Test::Nginx that have never
documented. I'd like to write more about them in the near future ;)
.SH "Nginx C modules that use Test::Nginx to drive their test suites"
.IX Header "Nginx C modules that use Test::Nginx to drive their test suites"
.IP "ngx_echo" 4
.IX Item "ngx_echo"
http://github.com/agentzh/echo\-nginx\-module <http://github.com/agentzh/echo-nginx-module>
.IP "ngx_headers_more" 4
.IX Item "ngx_headers_more"
http://github.com/agentzh/headers\-more\-nginx\-module <http://github.com/agentzh/headers-more-nginx-module>
.IP "ngx_chunkin" 4
.IX Item "ngx_chunkin"
<http://wiki.nginx.org/NginxHttpChunkinModule>
.IP "ngx_memc" 4
.IX Item "ngx_memc"
<http://wiki.nginx.org/NginxHttpMemcModule>
.IP "ngx_drizzle" 4
.IX Item "ngx_drizzle"
http://github.com/chaoslawful/drizzle\-nginx\-module <http://github.com/chaoslawful/drizzle-nginx-module>
.IP "ngx_rds_json" 4
.IX Item "ngx_rds_json"
http://github.com/agentzh/rds\-json\-nginx\-module <http://github.com/agentzh/rds-json-nginx-module>
.IP "ngx_rds_csv" 4
.IX Item "ngx_rds_csv"
http://github.com/agentzh/rds\-csv\-nginx\-module <http://github.com/agentzh/rds-csv-nginx-module>
.IP "ngx_xss" 4
.IX Item "ngx_xss"
http://github.com/agentzh/xss\-nginx\-module <http://github.com/agentzh/xss-nginx-module>
.IP "ngx_srcache" 4
.IX Item "ngx_srcache"
http://github.com/agentzh/srcache\-nginx\-module <http://github.com/agentzh/srcache-nginx-module>
.IP "ngx_lua" 4
.IX Item "ngx_lua"
http://github.com/chaoslawful/lua\-nginx\-module <http://github.com/chaoslawful/lua-nginx-module>
.IP "ngx_set_misc" 4
.IX Item "ngx_set_misc"
http://github.com/agentzh/set\-misc\-nginx\-module <http://github.com/agentzh/set-misc-nginx-module>
.IP "ngx_array_var" 4
.IX Item "ngx_array_var"
http://github.com/agentzh/array\-var\-nginx\-module <http://github.com/agentzh/array-var-nginx-module>
.IP "ngx_form_input" 4
.IX Item "ngx_form_input"
http://github.com/calio/form\-input\-nginx\-module <http://github.com/calio/form-input-nginx-module>
.IP "ngx_iconv" 4
.IX Item "ngx_iconv"
http://github.com/calio/iconv\-nginx\-module <http://github.com/calio/iconv-nginx-module>
.IP "ngx_set_cconv" 4
.IX Item "ngx_set_cconv"
http://github.com/liseen/set\-cconv\-nginx\-module <http://github.com/liseen/set-cconv-nginx-module>
.IP "ngx_postgres" 4
.IX Item "ngx_postgres"
<http://github.com/FRiCKLE/ngx_postgres>
.IP "ngx_coolkit" 4
.IX Item "ngx_coolkit"
<http://github.com/FRiCKLE/ngx_coolkit>
.IP "Naxsi" 4
.IX Item "Naxsi"
<http://code.google.com/p/naxsi/>
.SH "SOURCE REPOSITORY"
.IX Header "SOURCE REPOSITORY"
This module has a Git repository on Github, which has access for all.
.PP
.Vb 1
\&    http://github.com/agentzh/test\-nginx
.Ve
.PP
If you want a commit bit, feel free to drop me a line.
.SH "DEBIAN PACKAGES"
.IX Header "DEBIAN PACKAGES"
Anto\*'nio P. P. Almeida is maintaining a Debian package for this module
in his Debian repository: http://debian.perusio.net
.SH "AUTHORS"
.IX Header "AUTHORS"
agentzh (\s-1XXX\s0) \f(CW\*(C`<agentzh@gmail.com>\*(C'\fR
.PP
Antoine \s-1BONAVITA\s0 \f(CW\*(C`<antoine.bonavita@gmail.com>\*(C'\fR
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright (c) 2009\-2012, agentzh \f(CW\*(C`<agentzh@gmail.com>\*(C'\fR.
.PP
Copyright (c) 2011\-2012, Antoine Bonavita \f(CW\*(C`<antoine.bonavita@gmail.com>\*(C'\fR.
.PP
This module is licensed under the terms of the \s-1BSD\s0 license.
.PP
Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
.IP "\(bu" 4
Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
.IP "\(bu" 4
Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
.IP "\(bu" 4
Neither the name of the authors nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
.PP
\&\s-1THIS\s0 \s-1SOFTWARE\s0 \s-1IS\s0 \s-1PROVIDED\s0 \s-1BY\s0 \s-1THE\s0 \s-1COPYRIGHT\s0 \s-1HOLDERS\s0 \s-1AND\s0 \s-1CONTRIBUTORS\s0 \*(L"\s-1AS\s0 \s-1IS\s0\*(R" \s-1AND\s0 \s-1ANY\s0 \s-1EXPRESS\s0 \s-1OR\s0 \s-1IMPLIED\s0 \s-1WARRANTIES\s0, \s-1INCLUDING\s0, \s-1BUT\s0 \s-1NOT\s0 \s-1LIMITED\s0 \s-1TO\s0, \s-1THE\s0 \s-1IMPLIED\s0 \s-1WARRANTIES\s0 \s-1OF\s0 \s-1MERCHANTABILITY\s0 \s-1AND\s0 \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0 \s-1ARE\s0 \s-1DISCLAIMED\s0. \s-1IN\s0 \s-1NO\s0 \s-1EVENT\s0 \s-1SHALL\s0 \s-1THE\s0 \s-1COPYRIGHT\s0 \s-1HOLDER\s0 \s-1OR\s0 \s-1CONTRIBUTORS\s0 \s-1BE\s0 \s-1LIABLE\s0 \s-1FOR\s0 \s-1ANY\s0 \s-1DIRECT\s0, \s-1INDIRECT\s0, \s-1INCIDENTAL\s0, \s-1SPECIAL\s0, \s-1EXEMPLARY\s0, \s-1OR\s0 \s-1CONSEQUENTIAL\s0 \s-1DAMAGES\s0 (\s-1INCLUDING\s0, \s-1BUT\s0 \s-1NOT\s0 \s-1LIMITED\s0 \s-1TO\s0, \s-1PROCUREMENT\s0 \s-1OF\s0 \s-1SUBSTITUTE\s0 \s-1GOODS\s0 \s-1OR\s0 \s-1SERVICES\s0; \s-1LOSS\s0 \s-1OF\s0 \s-1USE\s0, \s-1DATA\s0, \s-1OR\s0 \s-1PROFITS\s0; \s-1OR\s0 \s-1BUSINESS\s0 \s-1INTERRUPTION\s0) \s-1HOWEVER\s0 \s-1CAUSED\s0 \s-1AND\s0 \s-1ON\s0 \s-1ANY\s0 \s-1THEORY\s0 \s-1OF\s0 \s-1LIABILITY\s0, \s-1WHETHER\s0 \s-1IN\s0 \s-1CONTRACT\s0, \s-1STRICT\s0 \s-1LIABILITY\s0, \s-1OR\s0 \s-1TORT\s0 (\s-1INCLUDING\s0 \s-1NEGLIGENCE\s0 \s-1OR\s0 \s-1OTHERWISE\s0) \s-1ARISING\s0 \s-1IN\s0 \s-1ANY\s0 \s-1WAY\s0 \s-1OUT\s0 \s-1OF\s0 \s-1THE\s0 \s-1USE\s0 \s-1OF\s0 \s-1THIS\s0 \s-1SOFTWARE\s0, \s-1EVEN\s0 \s-1IF\s0 \s-1ADVISED\s0 \s-1OF\s0 \s-1THE\s0 \s-1POSSIBILITY\s0 \s-1OF\s0 \s-1SUCH\s0 \s-1DAMAGE\s0.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Test::Nginx::LWP, Test::Nginx::Socket, Test::Base.
