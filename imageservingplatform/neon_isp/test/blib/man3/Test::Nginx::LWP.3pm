.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Test::Nginx::LWP 3"
.TH Test::Nginx::LWP 3 "2014-06-15" "perl v5.12.4" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::Nginx::LWP \- LWP\-backed test scaffold for the Nginx C modules
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Test::Nginx::LWP;
\&
\&    plan tests => $Test::Nginx::LWP::RepeatEach * 2 * blocks();
\&
\&    run_tests();
\&
\&    _\|_DATA_\|_
\&
\&    === TEST 1: sanity
\&    \-\-\- config
\&        location /echo {
\&            echo_before_body hello;
\&            echo world;
\&        }
\&    \-\-\- request
\&        GET /echo
\&    \-\-\- response_body
\&    hello
\&    world
\&    \-\-\- error_code: 200
\&
\&
\&    === TEST 2: set Server
\&    \-\-\- config
\&        location /foo {
\&            echo hi;
\&            more_set_headers \*(AqServer: Foo\*(Aq;
\&        }
\&    \-\-\- request
\&        GET /foo
\&    \-\-\- response_headers
\&    Server: Foo
\&    \-\-\- response_body
\&    hi
\&
\&
\&    === TEST 3: clear Server
\&    \-\-\- config
\&        location /foo {
\&            echo hi;
\&            more_clear_headers \*(AqServer: \*(Aq;
\&        }
\&    \-\-\- request
\&        GET /foo
\&    \-\-\- response_headers_like
\&    Server: nginx.*
\&    \-\-\- response_body
\&    hi
\&
\&
\&    === TEST 4: set request header at client side and rewrite it
\&    \-\-\- config
\&        location /foo {
\&            more_set_input_headers \*(AqX\-Foo: howdy\*(Aq;
\&            echo $http_x_foo;
\&        }
\&    \-\-\- request
\&        GET /foo
\&    \-\-\- request_headers
\&    X\-Foo: blah
\&    \-\-\- response_headers
\&    X\-Foo:
\&    \-\-\- response_body
\&    howdy
\&
\&
\&    === TEST 3: rewrite content length
\&    \-\-\- config
\&        location /bar {
\&            more_set_input_headers \*(AqContent\-Length: 2048\*(Aq;
\&            echo_read_request_body;
\&            echo_request_body;
\&        }
\&    \-\-\- request eval
\&    "POST /bar\en" .
\&    "a" x 4096
\&    \-\-\- response_body eval
\&    "a" x 2048
\&
\&
\&    === TEST 4: timer without explicit reset
\&    \-\-\- config
\&        location /timer {
\&            echo_sleep 0.03;
\&            echo "elapsed $echo_timer_elapsed sec.";
\&        }
\&    \-\-\- request
\&        GET /timer
\&    \-\-\- response_body_like
\&    ^elapsed 0\e.0(2[6\-9]|3[0\-6]) sec\e.$
\&
\&
\&    === TEST 5: small buf (using 2\-byte buf)
\&    \-\-\- config
\&        chunkin on;
\&        location /main {
\&            client_body_buffer_size    2;
\&            echo "body:";
\&            echo $echo_request_body;
\&            echo_request_body;
\&        }
\&    \-\-\- request
\&    POST /main
\&    \-\-\- start_chunk_delay: 0.01
\&    \-\-\- middle_chunk_delay: 0.01
\&    \-\-\- chunked_body eval
\&    ["hello", "world"]
\&    \-\-\- error_code: 200
\&    \-\-\- response_body eval
\&    "body:
\&
\&    helloworld"
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides a test scaffold based on LWP::UserAgent for automated testing in Nginx C module development.
.PP
This class inherits from Test::Base, thus bringing all its
declarative power to the Nginx C module testing practices.
.PP
You need to terminate or kill any Nginx processes before running the test suite if you have changed the Nginx server binary. Normally it's as simple as
.PP
.Vb 2
\&  killall nginx
\&  PATH=/path/to/your/nginx\-with\-memc\-module:$PATH prove \-r t
.Ve
.PP
This module will create a temporary server root under t/servroot/ of the current working directory and starts and uses the nginx executable in the \s-1PATH\s0 environment.
.PP
You will often want to look into \fIt/servroot/logs/error.log\fR
when things go wrong ;)
.SH "Sections supported"
.IX Header "Sections supported"
The following sections are supported:
.IP "config" 4
.IX Item "config"
.PD 0
.IP "http_config" 4
.IX Item "http_config"
.IP "request" 4
.IX Item "request"
.IP "request_headers" 4
.IX Item "request_headers"
.IP "more_headers" 4
.IX Item "more_headers"
.IP "response_body" 4
.IX Item "response_body"
.IP "response_body_like" 4
.IX Item "response_body_like"
.IP "response_headers" 4
.IX Item "response_headers"
.IP "response_headers_like" 4
.IX Item "response_headers_like"
.IP "error_code" 4
.IX Item "error_code"
.IP "chunked_body" 4
.IX Item "chunked_body"
.IP "middle_chunk_delay" 4
.IX Item "middle_chunk_delay"
.IP "start_chunk_delay" 4
.IX Item "start_chunk_delay"
.PD
.SH "Samples"
.IX Header "Samples"
You'll find live samples in the following Nginx 3rd\-party modules:
.IP "ngx_echo" 4
.IX Item "ngx_echo"
<http://wiki.nginx.org/NginxHttpEchoModule>
.IP "ngx_headers_more" 4
.IX Item "ngx_headers_more"
<http://wiki.nginx.org/NginxHttpHeadersMoreModule>
.IP "ngx_chunkin" 4
.IX Item "ngx_chunkin"
<http://wiki.nginx.org/NginxHttpChunkinModule>
.IP "ngx_memc" 4
.IX Item "ngx_memc"
<http://wiki.nginx.org/NginxHttpMemcModule>
.SH "SOURCE REPOSITORY"
.IX Header "SOURCE REPOSITORY"
This module has a Git repository on Github, which has access for all.
.PP
.Vb 1
\&    http://github.com/agentzh/test\-nginx
.Ve
.PP
If you want a commit bit, feel free to drop me a line.
.SH "AUTHOR"
.IX Header "AUTHOR"
agentzh (\s-1XXX\s0) \f(CW\*(C`<agentzh@gmail.com>\*(C'\fR
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright (c) 2009\-2012, agentzh \f(CW\*(C`<agentzh@gmail.com>\*(C'\fR.
.PP
This module is licensed under the terms of the \s-1BSD\s0 license.
.PP
Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
.IP "\(bu" 4
Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
.IP "\(bu" 4
Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
.IP "\(bu" 4
Neither the name of the authors nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
.PP
\&\s-1THIS\s0 \s-1SOFTWARE\s0 \s-1IS\s0 \s-1PROVIDED\s0 \s-1BY\s0 \s-1THE\s0 \s-1COPYRIGHT\s0 \s-1HOLDERS\s0 \s-1AND\s0 \s-1CONTRIBUTORS\s0 \*(L"\s-1AS\s0 \s-1IS\s0\*(R" \s-1AND\s0 \s-1ANY\s0 \s-1EXPRESS\s0 \s-1OR\s0 \s-1IMPLIED\s0 \s-1WARRANTIES\s0, \s-1INCLUDING\s0, \s-1BUT\s0 \s-1NOT\s0 \s-1LIMITED\s0 \s-1TO\s0, \s-1THE\s0 \s-1IMPLIED\s0 \s-1WARRANTIES\s0 \s-1OF\s0 \s-1MERCHANTABILITY\s0 \s-1AND\s0 \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0 \s-1ARE\s0 \s-1DISCLAIMED\s0. \s-1IN\s0 \s-1NO\s0 \s-1EVENT\s0 \s-1SHALL\s0 \s-1THE\s0 \s-1COPYRIGHT\s0 \s-1HOLDER\s0 \s-1OR\s0 \s-1CONTRIBUTORS\s0 \s-1BE\s0 \s-1LIABLE\s0 \s-1FOR\s0 \s-1ANY\s0 \s-1DIRECT\s0, \s-1INDIRECT\s0, \s-1INCIDENTAL\s0, \s-1SPECIAL\s0, \s-1EXEMPLARY\s0, \s-1OR\s0 \s-1CONSEQUENTIAL\s0 \s-1DAMAGES\s0 (\s-1INCLUDING\s0, \s-1BUT\s0 \s-1NOT\s0 \s-1LIMITED\s0 \s-1TO\s0, \s-1PROCUREMENT\s0 \s-1OF\s0 \s-1SUBSTITUTE\s0 \s-1GOODS\s0 \s-1OR\s0 \s-1SERVICES\s0; \s-1LOSS\s0 \s-1OF\s0 \s-1USE\s0, \s-1DATA\s0, \s-1OR\s0 \s-1PROFITS\s0; \s-1OR\s0 \s-1BUSINESS\s0 \s-1INTERRUPTION\s0) \s-1HOWEVER\s0 \s-1CAUSED\s0 \s-1AND\s0 \s-1ON\s0 \s-1ANY\s0 \s-1THEORY\s0 \s-1OF\s0 \s-1LIABILITY\s0, \s-1WHETHER\s0 \s-1IN\s0 \s-1CONTRACT\s0, \s-1STRICT\s0 \s-1LIABILITY\s0, \s-1OR\s0 \s-1TORT\s0 (\s-1INCLUDING\s0 \s-1NEGLIGENCE\s0 \s-1OR\s0 \s-1OTHERWISE\s0) \s-1ARISING\s0 \s-1IN\s0 \s-1ANY\s0 \s-1WAY\s0 \s-1OUT\s0 \s-1OF\s0 \s-1THE\s0 \s-1USE\s0 \s-1OF\s0 \s-1THIS\s0 \s-1SOFTWARE\s0, \s-1EVEN\s0 \s-1IF\s0 \s-1ADVISED\s0 \s-1OF\s0 \s-1THE\s0 \s-1POSSIBILITY\s0 \s-1OF\s0 \s-1SUCH\s0 \s-1DAMAGE\s0.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Test::Nginx::Socket, Test::Base.
